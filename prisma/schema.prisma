generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  name         String
  password     String
  profileImage String?
  coverImage   String?
  bio          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tweets       Tweet[]
  following    Follow[] @relation("Follows")
  followers    Follow[] @relation("FollowedBy")
  Reply        Reply[]
  Like         Like[]
}

model Tweet {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  replies   Reply[]
  likes     Like[]
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Follows", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("FollowedBy", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
}
